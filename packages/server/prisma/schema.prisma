generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// MODEL DEPARTAMENTO
model Departament {
  id        String    @id @default(uuid())
  dep_name  String
  email     String    @unique
  password  String
  role      String    @default("ADMIN")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Course    Course[]
  Prof      Prof[]
  Subject   Subject[]

  @@map("departaments")
}

model Course {
  id             String           @id @default(uuid())
  cou_name       String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  departamentId  String
  departament    Departament      @relation(fields: [departamentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Student        Student[]
  Course_Subject Course_Subject[]

  @@map("courses")
}

model Prof {
  id            String         @id @default(uuid())
  prof_name     String         @unique
  prof_status   Boolean
  email         String         @unique
  password      String
  prof_phone    String
  role          String         @default("TEACHER")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  departamentId String
  departament   Departament    @relation(fields: [departamentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Porf_Subject  Porf_Subject[]

  @@map("profs")
}

model Subject {
  id                String              @id @default(uuid())
  sub_name          String              @unique
  sub_shift         String
  sub_start_time    DateTime
  sub_stop_time     DateTime
  sub_description   String
  sub_mandatory     Boolean
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  departamentId     String
  departament       Departament         @relation(fields: [departamentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Porf_Subject      Porf_Subject[]
  Course_Subject    Course_Subject[]
  Student_Subject   Student_Subject[]
  Subjects_Subjects Subjects_Subjects[]

  @@map("subjects")
}

model Student {
  id               String  @id @default(uuid())
  stu_name         String   @unique
  stu_registration String   @unique
  stu_status       Boolean
  stu_period       String
  stu_mother_name  String
  stu_father_name  String
  stu_phone        String
  email            String  @unique
  password         String
  role             String  @default("STUDENT")
  courseName String  
  course   Course @relation(fields: [courseName], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Address         Address[]
  Student_Subject Student_Subject[]

  @@map("students")
}

model Address {
  id               String @id @default(uuid())
  add_street       String
  add_city         String
  add_neighborhood String
  add_number       String
  add_complement   String

  studentName String
  student   Student @relation(fields: [studentName], references: [stu_name], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Porf_Subject {
  id String @id @default(uuid())

  profName String
  prof     Prof   @relation(fields: [profName], references: [prof_name], onDelete: Cascade, onUpdate: Cascade)

  subjectName String
  subject     Subject @relation(fields: [subjectName], references: [sub_name], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profs_subjects")
}

model Course_Subject {
  id String @id @default(uuid())

  courseName String
  course     Course @relation(fields: [courseName], references: [cou_name], onDelete: Cascade, onUpdate: Cascade)

  subjectName String
  subject     Subject @relation(fields: [subjectName], references: [sub_name], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_subjects")
}

model Student_Subject {
  id            String @id @default(uuid())
  av1           Float?
  av2           Float?
  av3           Float?
  final_grade   Float?
  attendance    Int?
  student_count Int?

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, subjectId])
  @@map("student_subjects")
}

model Subjects_Subjects {
  id String @id @default(uuid())

  preRequisite String

  subjectName String
  subject     Subject @relation(fields: [subjectName], references: [sub_name], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subject_subject")
}
